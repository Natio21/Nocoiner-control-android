/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.natio21.nocoiner_control.openapi.client.models

import com.natio21.nocoiner_control.openapi.client.models.AntmChain
import com.natio21.nocoiner_control.openapi.client.models.Cooling
import com.natio21.nocoiner_control.openapi.client.models.MinerStatus
import com.natio21.nocoiner_control.openapi.client.models.PoolStats
import com.natio21.nocoiner_control.openapi.client.models.TempRange

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass


/**
 * 
 *
 * @param averageHashrate Deprecated. Same as hr_average but measure is MG/s.
 * @param bestShare 
 * @param chains 
 * @param chipTemp 
 * @param cooling 
 * @param devfee 
 * @param devfeePercent 
 * @param foundBlocks 
 * @param hrAverage 
 * @param hrError Errors rate
 * @param hrNominal 
 * @param hrRealtime 
 * @param hrStock 
 * @param hwErrors 
 * @param hwErrorsPercent 
 * @param instantHashrate Deprecated. Same as hr_realtime but measure is MG/s.
 * @param minerStatus 
 * @param minerType 
 * @param pcbTemp 
 * @param pools 
 * @param powerConsumption 
 * @param powerEfficiency 
 * @param powerUsage Deprecated. Same as power_efficiency
 */

@JsonClass(generateAdapter = true)
data class MinerSummary(
    val miner: Miner
)

@JsonClass(generateAdapter = true)
data class Miner(
    @Json(name = "miner_status") val minerStatus: MinerStatus,
    @Json(name = "miner_type") val minerType: String,
    @Json(name = "hr_stock") val hrStock: Double,
    @Json(name = "average_hashrate") val averageHashrate: Double,
    @Json(name = "instant_hashrate") val instantHashrate: Double,
    @Json(name = "hr_realtime") val hrRealtime: Double,
    @Json(name = "hr_nominal") val hrNominal: Double,
    @Json(name = "hr_average") val hrAverage: Double,
    @Json(name = "pcb_temp") val pcbTemp: Temperature,
    @Json(name = "chip_temp") val chipTemp: Temperature,
    @Json(name = "power_consumption") val powerConsumption: Int,
    @Json(name = "power_usage") val powerUsage: Int,
    @Json(name = "power_efficiency") val powerEfficiency: Double,
    @Json(name = "hw_errors_percent") val hwErrorsPercent: Double,
    @Json(name = "hr_error") val hrError: Double,
    @Json(name = "hw_errors") val hwErrors: Int,
    @Json(name = "devfee_percent") val devfeePercent: Double,
    val devfee: Double,
    val pools: List<Pool>,
    val cooling: Cooling,
    val chains: List<Chain>,
    @Json(name = "found_blocks") val foundBlocks: Int,
    @Json(name = "best_share") val bestShare: Long
)

@JsonClass(generateAdapter = true)
data class Temperature(
    val min: Int,
    val max: Int
)


@JsonClass(generateAdapter = true)
data class Settings(
    val mode: Mode
)

@JsonClass(generateAdapter = true)
data class Mode(
    val name: String
)

@JsonClass(generateAdapter = true)
data class Chain(
    val id: Int,
    val frequency: Double,
    val voltage: Int,
    @Json(name = "power_consumption") val powerConsumption: Int,
    @Json(name = "hashrate_ideal") val hashrateIdeal: Double,
    @Json(name = "hashrate_rt") val hashrateRt: Double,
    @Json(name = "hashrate_percentage") val hashratePercentage: Double,
    @Json(name = "hr_error") val hrError: Double,
    @Json(name = "hw_errors") val hwErrors: Int,
    @Json(name = "pcb_temp") val pcbTemp: Temperature,
    @Json(name = "chip_temp") val chipTemp: Temperature,
    @Json(name = "chip_statuses") val chipStatuses: ChipStatuses,
    val status: Status
)

@JsonClass(generateAdapter = true)
data class ChipStatuses(
    val red: Int,
    val orange: Int,
    val grey: Int
)

@JsonClass(generateAdapter = true)
data class Status(
    val state: String
)

