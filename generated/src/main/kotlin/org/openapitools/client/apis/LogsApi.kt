/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.natio21.nocoiner_control.openapi.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.natio21.nocoiner_control.openapi.client.models.ErrDescr
import com.natio21.nocoiner_control.openapi.client.models.LogType

import com.squareup.moshi.Json

import com.natio21.nocoiner_control.openapi.client.infrastructure.ApiClient
import com.natio21.nocoiner_control.openapi.client.infrastructure.ApiResponse
import com.natio21.nocoiner_control.openapi.client.infrastructure.ClientException
import com.natio21.nocoiner_control.openapi.client.infrastructure.ClientError
import com.natio21.nocoiner_control.openapi.client.infrastructure.ServerException
import com.natio21.nocoiner_control.openapi.client.infrastructure.ServerError
import com.natio21.nocoiner_control.openapi.client.infrastructure.MultiValueMap
import com.natio21.nocoiner_control.openapi.client.infrastructure.PartConfig
import com.natio21.nocoiner_control.openapi.client.infrastructure.RequestConfig
import com.natio21.nocoiner_control.openapi.client.infrastructure.RequestMethod
import com.natio21.nocoiner_control.openapi.client.infrastructure.ResponseType
import com.natio21.nocoiner_control.openapi.client.infrastructure.Success
import com.natio21.nocoiner_control.openapi.client.infrastructure.toMultiValue

class LogsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v1")
        }
    }

    /**
     * Clear logs
     * 
     * @param logType Log type
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsClear(logType: LogType) : Unit {
        val localVarResponse = logsClearWithHttpInfo(logType = logType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Clear logs
     * 
     * @param logType Log type
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsClearWithHttpInfo(logType: LogType) : ApiResponse<Unit?> {
        val localVariableConfig = logsClearRequestConfig(logType = logType)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsClear
     *
     * @param logType Log type
     * @return RequestConfig
     */
    fun logsClearRequestConfig(logType: LogType) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/logs/{log_type}/clear".replace("{"+"log_type"+"}", encodeURIComponent(logType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Read log file
     * 
     * @param logType Log type name. All logs &#x60;*&#x60; are not implemented for this route
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun logsGet(logType: LogType) : Unit {
        val localVarResponse = logsGetWithHttpInfo(logType = logType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Read log file
     * 
     * @param logType Log type name. All logs &#x60;*&#x60; are not implemented for this route
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun logsGetWithHttpInfo(logType: LogType) : ApiResponse<Unit?> {
        val localVariableConfig = logsGetRequestConfig(logType = logType)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation logsGet
     *
     * @param logType Log type name. All logs &#x60;*&#x60; are not implemented for this route
     * @return RequestConfig
     */
    fun logsGetRequestConfig(logType: LogType) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/logs/{log_type}".replace("{"+"log_type"+"}", encodeURIComponent(logType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
